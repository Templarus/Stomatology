/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stomatology;

import com.michaelbaranov.microba.calendar.CalendarPane;
import com.michaelbaranov.microba.calendar.DatePicker;
import com.michaelbaranov.microba.gradienteditor.GradientEditor;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author TemplaRus
 */
public class Popup_Rabota extends javax.swing.JDialog {

    public static Boolean Redraw_icons = false;
    DatePicker datePicker;
    int root_count = 0;
    int tooth_type = 0;
    int tooth_number = 0;
    JPanel tab1J;
    JPanel tab2J;
    private ArrayList<PoseshStrRabZub> statusGrZub = new ArrayList<>();
    int idPos = MainForm.idPosesh;

    /**
     * Creates new form RabotaStatusPopup
     *
     * @param parent
     * @param modal
     * @param root_count
     * @param tooth_number
     * @param tooth_type
     */
    public Popup_Rabota(java.awt.Frame parent, boolean modal, int root_count, int tooth_number, int tooth_type) {

        super(parent, modal);
        initComponents();

        pan.add("DatePicker", buildDatePickerTab());

        this.root_count = root_count;
        this.tooth_type = tooth_type;
        this.tooth_number = tooth_number;

        for (PoseshStrRabZub statGrZub : MainForm.cl.getPosesh().get(idPos).getPoseshStr().get(tooth_number).getPoseshRabZub()) {
            this.statusGrZub.add(statGrZub);
        }
        datePicker.setVisible(false);
        FillTabs();
        fillElements();
        restrictions();
    }

    /**
     *
     * @return
     */
    public ArrayList<PoseshStrRabZub> getStatusGrZub() {
        return statusGrZub;
    }

    /**
     *
     * @param statusGrZub
     */
    public void setStatusGrZub(ArrayList<PoseshStrRabZub> statusGrZub) {
        this.statusGrZub = statusGrZub;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelToothStatus = new javax.swing.JLabel();
        buttonDiscard = new javax.swing.JButton();
        buttonAccept = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        scrollPane_Remark = new javax.swing.JScrollPane();
        textAreaPrim = new javax.swing.JTextArea();
        labelType = new javax.swing.JLabel();
        comboBoxRezult = new javax.swing.JComboBox();
        labelPrim = new javax.swing.JLabel();
        pan = new javax.swing.JPanel();
        label_Date = new javax.swing.JLabel();
        buttonSanation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 102));
        setBounds(new java.awt.Rectangle(0, 0, 160, 100));
        setMinimumSize(new java.awt.Dimension(300, 420));
        setUndecorated(true);
        setSize(new java.awt.Dimension(300, 420));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setMinimumSize(new java.awt.Dimension(300, 420));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 420));
        jPanel1.setLayout(null);

        labelToothStatus.setBackground(new java.awt.Color(255, 51, 153));
        labelToothStatus.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelToothStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelToothStatus.setText("Весь зуб");
        labelToothStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelToothStatus.setMaximumSize(new java.awt.Dimension(240, 20));
        labelToothStatus.setMinimumSize(new java.awt.Dimension(240, 20));
        labelToothStatus.setPreferredSize(new java.awt.Dimension(240, 20));
        labelToothStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelToothStatusMouseClicked(evt);
            }
        });
        jPanel1.add(labelToothStatus);
        labelToothStatus.setBounds(30, 120, 240, 20);

        buttonDiscard.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        buttonDiscard.setText("Отмена");
        buttonDiscard.setDoubleBuffered(true);
        buttonDiscard.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDiscard.setMargin(new java.awt.Insets(0, 4, 0, 4));
        buttonDiscard.setMaximumSize(new java.awt.Dimension(110, 40));
        buttonDiscard.setMinimumSize(new java.awt.Dimension(110, 40));
        buttonDiscard.setOpaque(false);
        buttonDiscard.setPreferredSize(new java.awt.Dimension(110, 40));
        buttonDiscard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonDiscardMouseClicked(evt);
            }
        });
        jPanel1.add(buttonDiscard);
        buttonDiscard.setBounds(160, 370, 110, 40);

        buttonAccept.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        buttonAccept.setText("Подтвердить");
        buttonAccept.setDoubleBuffered(true);
        buttonAccept.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonAccept.setMargin(new java.awt.Insets(0, 4, 0, 4));
        buttonAccept.setMaximumSize(new java.awt.Dimension(110, 40));
        buttonAccept.setMinimumSize(new java.awt.Dimension(110, 40));
        buttonAccept.setOpaque(false);
        buttonAccept.setPreferredSize(new java.awt.Dimension(110, 40));
        buttonAccept.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonAcceptMouseClicked(evt);
            }
        });
        buttonAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAcceptActionPerformed(evt);
            }
        });
        jPanel1.add(buttonAccept);
        buttonAccept.setBounds(30, 370, 110, 40);

        jSeparator1.setPreferredSize(new java.awt.Dimension(296, 10));
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(2, 180, 296, 10);

        textAreaPrim.setColumns(20);
        textAreaPrim.setRows(5);
        textAreaPrim.setEnabled(false);
        scrollPane_Remark.setViewportView(textAreaPrim);

        jPanel1.add(scrollPane_Remark);
        scrollPane_Remark.setBounds(10, 306, 280, 60);

        labelType.setText("Результат работы");
        jPanel1.add(labelType);
        labelType.setBounds(10, 190, 300, 14);

        for(SprRezultat rez : Start.sDB.getSprRezult()){
            comboBoxRezult.addItem(rez);
        }
        comboBoxRezult.setSelectedItem(0);
        comboBoxRezult.setToolTipText("");
        comboBoxRezult.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxRezultItemStateChanged(evt);
            }
        });
        comboBoxRezult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxRezultActionPerformed(evt);
            }
        });
        jPanel1.add(comboBoxRezult);
        comboBoxRezult.setBounds(10, 210, 280, 20);

        labelPrim.setText("Примечание");
        jPanel1.add(labelPrim);
        labelPrim.setBounds(10, 290, 300, 20);

        pan.setLayout(new javax.swing.BoxLayout(pan, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(pan);
        pan.setBounds(10, 250, 150, 40);

        label_Date.setText("Дата");
        jPanel1.add(label_Date);
        label_Date.setBounds(10, 230, 300, 14);

        buttonSanation.setText("Санация");
        buttonSanation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSanationActionPerformed(evt);
            }
        });
        jPanel1.add(buttonSanation);
        buttonSanation.setBounds(10, 150, 280, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 300, 420);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing

    private void restrictions() {
        System.err.println("IDPOSESH===" + MainForm.idPoseshDB);
        if (MainForm.idPoseshDB != 0) {
            comboBoxRezult.setEnabled(false);
            textAreaPrim.setEditable(false);
            pan.setEnabled(false);
        } else {
            comboBoxRezult.setEnabled(true);
            textAreaPrim.setEditable(true);
            pan.setEnabled(true);
        }
    }
    private void buttonAcceptMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buttonAcceptMouseClicked
    {//GEN-HEADEREND:event_buttonAcceptMouseClicked


    }//GEN-LAST:event_buttonAcceptMouseClicked

    private void labelToothStatusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelToothStatusMouseClicked
        if (MainForm.idPosesh == 0) {
            Point mloc = MouseInfo.getPointerInfo().getLocation();
            Popup_Tooth_Status TSP = new Popup_Tooth_Status(new javax.swing.JFrame(), true, 0, 0, this.tooth_number, false);
            TSP.setBounds(mloc.x, mloc.y, TSP.getPreferredSize().width, TSP.getPreferredSize().height);
            TSP.setVisible(true);
        }
    }//GEN-LAST:event_labelToothStatusMouseClicked

    private void buttonAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAcceptActionPerformed

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(datePicker.getDate());
        Calendar calNow = Calendar.getInstance();
        calNow.setTime(new Date());
        if (comboBoxRezult.getSelectedIndex() > 0) {
            if (calNow.get(Calendar.YEAR) >= calendar.get(Calendar.YEAR)) {
                if ((calNow.get(Calendar.MONTH) >= calendar.get(Calendar.MONTH))) {
                    if (calNow.get(Calendar.DAY_OF_MONTH) > calendar.get(Calendar.DAY_OF_MONTH)) {
                        JOptionPane.showMessageDialog(null, "Дата назначения следующего визита не должна быть раньше текущей даты", "Внимание", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        String dt = Methods.stringToDate(calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.YEAR));
                        //System.out.println("DT  =  " + dt);
                        MainForm.cl.getPosesh().get(idPos).getPoseshStrVrem().get(tooth_number).setDtSledVisist(dt);
                        MainForm.cl.getPosesh().get(idPos).getPoseshStrVrem().get(tooth_number).setFlObrab(false);
                        MainForm.cl.getPosesh().get(idPos).getPoseshStrVrem().get(tooth_number).setPrim(textAreaPrim.getText());
                        MainForm.cl.getPosesh().get(idPos).getPoseshStr().get(tooth_number).setPoseshRabZub(statusGrZub);
                        MainForm.Redraw_icons = true;
                        Find.mf.Redraw();
                        dispose();
                    }
                }
            }
        } else {
            MainForm.cl.getPosesh().get(idPos).getPoseshStr().get(tooth_number).setPoseshRabZub(statusGrZub);
            MainForm.Redraw_icons = true;
            Find.mf.Redraw();
            dispose();
        }


    }//GEN-LAST:event_buttonAcceptActionPerformed

    private void buttonDiscardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonDiscardMouseClicked
        this.statusGrZub.removeAll(statusGrZub);
        this.dispose();
        MainForm.Redraw_icons = true;
        Find.mf.Redraw();
    }//GEN-LAST:event_buttonDiscardMouseClicked

    private void comboBoxRezultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxRezultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxRezultActionPerformed

    private void comboBoxRezultItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxRezultItemStateChanged
        SprRezultat rez = (SprRezultat) comboBoxRezult.getSelectedItem();
        if (rez.getIdRezultat() != 0) {
            textAreaPrim.setText("");
            textAreaPrim.setEnabled(true);
            datePicker.setVisible(true);
            labelPrim.setEnabled(true);
        } else {
            textAreaPrim.setText("");
            textAreaPrim.setEnabled(false);
            datePicker.setVisible(false);
            labelPrim.setEnabled(true);
        }

    }//GEN-LAST:event_comboBoxRezultItemStateChanged

    private void buttonSanationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonSanationActionPerformed
    {//GEN-HEADEREND:event_buttonSanationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonSanationActionPerformed

    private void FillTabs() {
        if (this.tooth_type == 0) {
            tab1J = new Object_Tooth(this.root_count, 3, 4, this.tooth_number, false);
        } else {
            tab1J = new Object_Tooth(this.root_count, 3, 5, this.tooth_number, false);
        }
        tab1J.setBounds(30, 10, 104, 104);
        tab1J.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.add(tab1J);

        tab2J = new Object_Tooth(this.root_count, 3, 5 + this.root_count, this.tooth_number, false); //4 3
        tab2J.setBounds(160, 10, 104, 104);
        tab2J.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.add(tab2J);
    }

    private void fillElements() 
    {
       
        for(PoseshStrVrem poseshStrVrem : MainForm.cl.getPosesh().get(idPos).getPoseshStrVrem()){
            if(poseshStrVrem.getIdZub() == tooth_number){
                System.out.println("poseshStrVrem.getPrim() = " + poseshStrVrem.getPrim());
                textAreaPrim.setText(poseshStrVrem.getPrim());
            }     
        }
        

    }

    /**
     * @param args the command line arguments
     */
    public void Redraw() {
        if (this.Redraw_icons) {
            jPanel1.remove(tab1J);
            jPanel1.remove(tab2J);
            FillTabs();
            Object_Tooth.RSP.Redraw_icons = false;
            System.out.println("RabotaStatusPopup REDRAWED");
        }
    }

    private JComponent buildDatePickerTab() {
        JPanel panel = new JPanel();
        datePicker = new DatePicker();
        // datePicker.setDateFormat(new SimpleDateFormat("HH dd yyyy"));
        datePicker.setDateFormat(SimpleDateFormat.getDateTimeInstance());
        // datePicker.setStripTime(false);
        datePicker.setEnabled(false);
        datePicker.setKeepTime(true);
        datePicker.setStripTime(false);
        datePicker.setShowNumberOfWeek(true);
        // datePicker.setEnabled(false);
        // datePicker.setPickerStyle(DatePicker.PICKER_STYLE_BUTTON);
        // datePicker.showButtonOnly(false);
        // datePicker.setToolTipText("hello!!!!");
        // datePicker.setShowNumberOfWeek(true);

        Map ov = new HashMap();

        ov.put(CalendarPane.COLOR_CALENDAR_GRID_FOREGROUND_ENABLED,
                Color.BLUE);

        datePicker.setColorOverrideMap(ov);

        panel.setLayout(new GridBagLayout());
        panel.add(datePicker, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
                GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(
                        5, 5, 5, 5), 0, 0));

        datePicker.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("DatePicker:" + datePicker.getDate());

            }
        });

        return panel;

    }

    private static class ColorAdaptor implements ChangeListener,
            ListSelectionListener {

        private GradientEditor editor;

        private JColorChooser chooser;

        public ColorAdaptor(GradientEditor editor, JColorChooser chooser) {
            super();
            this.editor = editor;
            this.chooser = chooser;

            editor.getColorSelectionModel().addListSelectionListener(this);
            chooser.getSelectionModel().addChangeListener(this);
        }

        public void valueChanged(ListSelectionEvent e) {
            int index = editor.getColorSelectionModel().getLeadSelectionIndex();
            // System.out.println(index);
            // System.out.println(e.getFirstIndex());
            // System.out.println(e.getLastIndex());
            // System.out.println("-------");

            Color c = (Color) editor.getDataModel().getValueAt(index,
                    editor.getColorColumn());
            chooser.setColor(c);
        }

        public void stateChanged(ChangeEvent e) {

            if (!editor.getColorSelectionModel().isSelectionEmpty()) {
                int index = editor.getColorSelectionModel()
                        .getLeadSelectionIndex();

                editor.getDataModel().setValueAt(chooser.getColor(), index,
                        editor.getColorColumn());
            }

        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Popup_Rabota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Popup_Rabota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Popup_Rabota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Popup_Rabota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Popup_Rabota dialog = new Popup_Rabota(new javax.swing.JFrame(), true, -1, -1, -1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAccept;
    private javax.swing.JButton buttonDiscard;
    private javax.swing.JButton buttonSanation;
    private javax.swing.JComboBox comboBoxRezult;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelPrim;
    private javax.swing.JLabel labelToothStatus;
    private javax.swing.JLabel labelType;
    private javax.swing.JLabel label_Date;
    private javax.swing.JPanel pan;
    private javax.swing.JScrollPane scrollPane_Remark;
    private javax.swing.JTextArea textAreaPrim;
    // End of variables declaration//GEN-END:variables
}
